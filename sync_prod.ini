[paths]
# relative to WPTSYNC_REPO_ROOT env var, if set, or curdir
repos = .
# relative to WPTSYNC_ROOT env var, if set, or curdir
worktrees = work
logs = logs
try_logs = data

[pulse]
username = %SECRET%
password = %SECRET%
host = pulse.mozilla.org
port = 5671
ssl = true

github.queue = wpt-sync-prod/github
github.exchange = exchange/github-webhooks/v1
github.routing_key = #

hgmo.queue = wpt-sync-prod/hgmo
hgmo.exchange = exchange/hgpushes/v2
hgmo.routing_key = #

taskcluster.queue = wpt-sync-prod/taskcluster
taskcluster.exchange = exchange/taskcluster-queue/v1/task-group-resolved
taskcluster.routing_key= *.*.gecko-level-1._

treeherder.queue = wpt-sync-prod/treeherder-jobs
treeherder.exchange = exchange/taskcluster-treeherder/v1/jobs
treeherder.routing_key = tc-treeherder.try._

[sync]
ref = refs/syncs/data
enabled.upstream=
enabled.downstream=
enabled.landing=

[gecko]
# See also gecko_config file
# This names the repos by the last component of their path on m-c
# Here they don't have values, in test the values are the paths to
# the remotes on disk
repo.autoland=
repo.mozilla-inbound=
repo.mozilla-central=
landing = autoland
refs.central = mozilla/central
refs.mozilla-inbound = mozilla/inbound
refs.autoland = autoland/branches/default/tip
path.wpt = testing/web-platform/tests
path.meta = testing/web-platform/meta
worktree.max-count = 10
logs.max-count = 20
try.stability_count = 5
try.max-tests = 500
needinfo.upstream=wptsync@mozilla.bugs,
needinfo.landing=wptsync@mozilla.bugs,

[web-platform-tests]
# See also wpt_config file
repo.url = https://github.com/web-platform-tests/wpt
github.token = %SECRET%
github.user = moz-wptsync-bot
landing = master

[metadata]
repo.url = https://github.com/jgraham/wpt-metadata
# We end up using the same credentials as [web-platform-tests]

[bugzilla]
apikey = %SECRET%
url = https://bugzilla.mozilla.org/rest
username = wptsync@mozilla.bugs

[celery]
timezone = UTC

[taskcluster]
client_id = %SECRET%
token = %SECRET%

[phabricator]
token = %SECRET%
listener.interval = 60

[notify]
components = Core :: CSS Parsing and Computation; Core :: CSS Transitions and Animations; Core :: DOM: CSS Object Model; Core :: Layout; Core :: Layout: Block and Inline; Core :: Layout: Columns; Core :: Layout: Flexbox; Core :: Layout: Floats; Core :: Layout: Form Controls; Core :: Layout: Generated Content, Lists, and Counters; Core :: Layout: Grid; Core :: Layout: Images, Video, and HTML Frames; Core :: Layout: Positioned; Core :: Layout: Ruby; Core :: Layout: Scrolling and Overflow; Core :: Layout: Tables; Core :: Layout: Text and Fonts; Core :: SVG
